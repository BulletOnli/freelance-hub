// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
  // output          = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ENUMS
enum UserRole {
  ADMIN
  CLIENT
  FREELANCER
  STRANGER
}

enum WALLET_TRANSACTION_TYPE {
  DEBIT
  CREDIT
}

enum WALLET_TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum GIG_STATUS {
  AVAILABLE
  ONGOING
  DONE
}

enum GIG_CONTRACT_STATUS {
  PENDING
  ONGOING
  DONE
  CANCELED
}

enum GIG_APPLICATION_STATUS {
  PENDING
  ACCEPTED
  DECLINED
}

// MODELS

model User {
  id                  String         @id
  firstName           String
  lastName            String
  email               String         @unique
  profilePicture      String? // Upload thing link
  role                UserRole       @default(STRANGER)
  profile             UserProfile?
  wallet              Wallet?
  gigs                Gig[]
  clientContracts     GigContract[]  @relation(name: "ClientContracts")
  freelancerContracts GigContract[]  @relation(name: "FreelancerContracts")
  gigApplications     GigApplicant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("users")
}

model UserProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  bio            String
  specialization String[]
  portfolio      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user-profile")
}

model Wallet {
  id                 String              @id @default(uuid())
  userId             String              @unique
  balance            Float               @default(0)
  walletTransactions WalletTransaction[]

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("wallets")
}

model WalletTransaction {
  id            String                    @id @default(uuid())
  walletId      String
  gigContractId String?
  type          WALLET_TRANSACTION_TYPE
  amount        Float
  description   String
  status        WALLET_TRANSACTION_STATUS @default(PENDING)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  wallet      Wallet       @relation(fields: [walletId], references: [id], onDelete: Cascade)
  gigContract GigContract? @relation(fields: [gigContractId], references: [id])

  @@map("wallet-transactions")
}

model Gig {
  id          String         @id @default(uuid())
  userId      String // The one who created the GIG
  title       String
  description String
  budget      Float
  files       String[]
  status      GIG_STATUS     @default(AVAILABLE)
  contract    GigContract?
  applicants  GigApplicant[]
  deadline    DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("gigs")
}

model GigContract {
  id           String              @id @default(uuid())
  gigId        String              @unique
  freelancerId String
  clientId     String
  status       GIG_CONTRACT_STATUS @default(ONGOING)
  price        Float
  startDate    DateTime? // When the Contract is accepted (status = "ONGOING")
  endDate      DateTime? // Deadline
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  gig                Gig                 @relation(fields: [gigId], references: [id], onDelete: Cascade)
  freelancer         User                @relation(name: "FreelancerContracts", fields: [freelancerId], references: [id])
  client             User                @relation(name: "ClientContracts", fields: [clientId], references: [id])
  walletTransactions WalletTransaction[]

  @@map("gig-contracts")
}

model GigApplicant {
  id           String                 @id @default(uuid())
  gigId        String
  freelancerId String
  price        Float
  message      String
  portfolio    String
  status       GIG_APPLICATION_STATUS @default(PENDING)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
  gig        Gig? @relation(fields: [gigId], references: [id], onDelete: Cascade)

  @@unique([gigId, freelancerId])
  @@map("gig-applicants")
}
