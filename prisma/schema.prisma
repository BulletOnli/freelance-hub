// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ENUMS
enum UserRole {
  ADMIN
  CLIENT
  FREELANCER
}

enum WALLET_TRANSACTION_TYPE {
  CASH_OUT
  CASH_IN
  PAY_BILLS
}

enum WALLET_TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum GIG_STATUS {
  AVAILABLE
  ONGOING
  DONE
}

enum GIG_CONTRACT_STATUS {
  PENDING
  ONGOING
  DONE
  CANCELED
}

// MODELS

model User {
  id                  String        @id
  firstName           String
  lastName            String
  email               String?       @unique
  password            String?
  profilePicture      String? // Upload thing link
  googleId            String?
  role                UserRole
  sessions            Session[]
  profile             UserProfile?
  wallet              Wallet?
  gigs                Gig[]
  clientContracts     GigContract[] @relation(name: "ClientContracts")
  freelancerContracts GigContract[] @relation(name: "FreelancerContracts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("users")
}

model UserProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  bio            String
  specialization String[]
  portfolio      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user-profile")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Wallet {
  id                 String              @id @default(uuid())
  userId             String              @unique
  balance            Float               @default(0)
  walletTransactions WalletTransaction[]

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("wallets")
}

model WalletTransaction {
  id        String                    @id @default(uuid())
  walletId  String
  type      WALLET_TRANSACTION_TYPE
  amount    Float
  status    WALLET_TRANSACTION_STATUS @default(PENDING)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet-transactions")
}

model Gig {
  id          String       @id @default(uuid())
  userId      String // The one who created the GIG
  title       String
  description String
  budget      Float
  files       String[]
  status      GIG_STATUS   @default(AVAILABLE)
  contract    GigContract?
  deadline    DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("gigs")
}

model GigContract {
  id           String              @id @default(uuid())
  gigId        String              @unique
  freelancerId String
  clientId     String
  status       GIG_CONTRACT_STATUS @default(PENDING)
  price        Float
  startDate    DateTime? // When the Contract is accepted (status = "ONGOING")
  endDate      DateTime? // Deadline
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  gig        Gig  @relation(fields: [gigId], references: [id])
  freelancer User @relation(name: "FreelancerContracts", fields: [freelancerId], references: [id])
  client     User @relation(name: "ClientContracts", fields: [clientId], references: [id])

  @@map("gig-contracts")
}
